/*! tsParticles Light Interaction v1.41.0 by Matteo Bruni */
!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e(require("tsparticles"));else if("function"==typeof define&&define.amd)define(["tsparticles"],e);else{var o="object"==typeof exports?e(require("tsparticles")):e(t.window);for(var n in o)("object"==typeof exports?exports:t)[n]=o[n]}}(this,(function(t){return function(){"use strict";var e={764:function(e){e.exports=t}},o={};function n(t){var r=o[t];if(void 0!==r)return r.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.d=function(t,e){for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};return function(){n.r(r),n.d(r,{loadLightInteraction:function(){return i}});var t=n(764);class e extends t.ExternalInteractorBase{constructor(t){super(t)}interact(){const e=this.container;if(e.actualOptions.interactivity.events.onHover.enable&&"mousemove"===e.interactivity.status){const o=e.interactivity.mouse.position;if(!o)return;e.canvas.draw((n=>{!function(e,o,n){const r=e.actualOptions.interactivity.modes.light.area;o.beginPath(),o.arc(n.x,n.y,r.radius,0,2*Math.PI);const i=o.createRadialGradient(n.x,n.y,0,n.x,n.y,r.radius),a=r.gradient,s={start:(0,t.colorToRgb)(a.start),stop:(0,t.colorToRgb)(a.stop)};s.start&&s.stop&&(i.addColorStop(0,(0,t.getStyleFromRgb)(s.start)),i.addColorStop(1,(0,t.getStyleFromRgb)(s.stop)),o.fillStyle=i,o.fill())}(e,n,o)}))}}isEnabled(){const e=this.container,o=e.interactivity.mouse,n=e.actualOptions.interactivity.events;return!(!n.onHover.enable||!o.position)&&(0,t.isInArray)("light",n.onHover.mode)}reset(){}}class o extends t.ParticlesInteractorBase{constructor(t){super(t)}interact(e){const o=this.container;if(o.actualOptions.interactivity.events.onHover.enable&&"mousemove"===o.interactivity.status){const n=this.container.interactivity.mouse.position;n&&o.canvas.draw((r=>{!function(e,o,n,r){var i,a;const s=n.getPosition(),c=e.actualOptions.interactivity.modes.light.shadow;o.save();const l=n.getRadius(),u=n.sides,d=2*Math.PI/u,p=-(null!==(a=null===(i=n.rotate)||void 0===i?void 0:i.value)&&void 0!==a?a:0)+Math.PI/4,f=[];for(let t=0;t<u;t++)f.push({x:s.x+l*Math.sin(p+d*t)*1,y:s.y+l*Math.cos(p+d*t)*1});const v=[],y=c.length;for(const t of f){const e=Math.atan2(r.y-t.y,r.x-t.x),o=t.x+y*Math.sin(-e-Math.PI/2),n=t.y+y*Math.cos(-e-Math.PI/2);v.push({endX:o,endY:n,startX:t.x,startY:t.y})}const h=(0,t.colorToRgb)(c.color);if(!h)return;const g=(0,t.getStyleFromRgb)(h);for(let t=v.length-1;t>=0;t--){const e=t==v.length-1?0:t+1;o.beginPath(),o.moveTo(v[t].startX,v[t].startY),o.lineTo(v[e].startX,v[e].startY),o.lineTo(v[e].endX,v[e].endY),o.lineTo(v[t].endX,v[t].endY),o.fillStyle=g,o.fill()}o.restore()}(o,r,e,n)}))}}isEnabled(){const e=this.container,o=e.interactivity.mouse,n=e.actualOptions.interactivity.events;return!(!n.onHover.enable||!o.position)&&(0,t.isInArray)("light",n.onHover.mode)}reset(){}}function i(t){t.addInteractor("externalLight",(t=>new e(t))),t.addInteractor("particlesLight",(t=>new o(t)))}}(),r}()}));
